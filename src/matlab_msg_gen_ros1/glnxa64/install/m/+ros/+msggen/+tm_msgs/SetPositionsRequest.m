
classdef SetPositionsRequest < ros.Message
    %SetPositionsRequest MATLAB implementation of tm_msgs/SetPositionsRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'tm_msgs/SetPositionsRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '13d486e0180f3a17f2c79013770ec317' % The MD5 Checksum of the message definition
        PropertyList = { 'MotionType' 'Positions' 'Velocity' 'AccTime' 'BlendPercentage' 'FineGoal' } % List of non-constant message properties
        ROSPropertyList = { 'motion_type' 'positions' 'velocity' 'acc_time' 'blend_percentage' 'fine_goal' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        PTPJ = int8(1)
        PTPT = int8(2)
        LINET = int8(4)
        CIRCT = int8(6)
        PLINET = int8(8)
    end
    properties
        MotionType
        Positions
        Velocity
        AccTime
        BlendPercentage
        FineGoal
    end
    methods
        function set.MotionType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPositionsRequest', 'MotionType');
            obj.MotionType = int8(val);
        end
        function set.Positions(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SetPositionsRequest', 'Positions');
            obj.Positions = double(val);
        end
        function set.Velocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPositionsRequest', 'Velocity');
            obj.Velocity = double(val);
        end
        function set.AccTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPositionsRequest', 'AccTime');
            obj.AccTime = double(val);
        end
        function set.BlendPercentage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPositionsRequest', 'BlendPercentage');
            obj.BlendPercentage = int32(val);
        end
        function set.FineGoal(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPositionsRequest', 'FineGoal');
            obj.FineGoal = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.tm_msgs.SetPositionsRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.tm_msgs.SetPositionsRequest(strObj);
        end
    end
end
